resources:
# bosh.io public stemcell
- name: softlayer-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-softlayer-esxi-ubuntu-trusty-go_agent

# bosh.io public releases
- name: cf-release-tarball
  type: bosh-io-release
  source:
    repository: cloudfoundry/cf-release
- name: consul-release-tarball
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/consul-release
- name: diego-release-tarball
  type: bosh-io-release
  source:
    repository: cloudfoundry/diego-release
- name: etcd-release-tarball
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/etcd-release
- name: garden-linux-release-tarball
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/garden-linux-release
- name: rootfs-release-tarball
  type: bosh-io-release
  source:
    repository: cloudfoundry/cflinuxfs2-rootfs-release

# releases to clone
- name: cf-release
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry/cf-release.git
- name: deployments-furnace
  type: git
  source:
    branch: master
    uri: git@github.ibm.com:sykesmat/deployments-furnace.git
    private_key: {{deployments_private_key}}
- name: diego-release
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry/diego-release.git
- name: furnace-release
  type: git
  source:
    branch: master
    uri: https://github.com/cf-furnace/furnace-release.git
- name: kubernetes-release
  type: git
  source:
    branch: master
    uri: https://github.com/cf-furnace/kubernetes-release.git

# furnace deployments
- name: cf-furnace
  type: bosh-deployment
  source:
    target: {{bosh_target}}
    username: {{bosh_user}}
    password: {{bosh_password}}
    deployment: cf-furnace
- name: cf-furnace-diego
  type: bosh-deployment
  source:
    target: {{bosh_target}}
    username: {{bosh_user}}
    password: {{bosh_password}}
    deployment: cf-furnace-diego
- name: cf-furnace-kube
  type: bosh-deployment
  source:
    target: {{bosh_target}}
    username: {{bosh_user}}
    password: {{bosh_password}}
    deployment: cf-furnace-kube

jobs:
- name: deploy-cf
  public: false
  serial_groups:
  - deploy-cf
  plan:
  - aggregate:
    - get: softlayer-stemcell
      trigger: true
    - get: cf-release-tarball
      trigger: true
    - get: cf-release
      params:
        depth: 10
        submodules: none
    - get: deployments-furnace
      params:
        depth: 10
        submodules: none
    - get: diego-release
      params:
        depth: 10
        submodules: none
    - get: kubernetes-release
      params:
        depth: 10
        submodules: none
  - task: generate-manifests
    config:
      image_resource:
        type: docker-image
        source: { repository: sykesm/bosh-deploy }
      platform: linux
      inputs:
      - name: cf-release
      - name: diego-release
      - name: deployments-furnace
      - name: kubernetes-release
      outputs:
      - name: manifests
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          bosh -n target {{bosh_target}} {{bosh_alias}}
          bosh login {{bosh_user}} {{bosh_password}}
          workspace=$PWD deployments-furnace/furnace/generate-manifests.sh
          cp deployments-furnace/furnace/manifests/*.yml manifests/
  - put: cf-furnace
    params:
      cleanup: true
      manifest: manifests/cf.yml
      stemcells:
      - softlayer-stemcell/*.tgz
      releases:
      - cf-release-tarball/*.tgz

- name: deploy-diego
  public: false
  serial_groups:
  - deploy-diego
  plan:
  - aggregate:
    - get: softlayer-stemcell
      trigger: true
    - get: diego-release-tarball
      trigger: true
    - get: etcd-release-tarball
      trigger: true
    - get: garden-linux-release-tarball
      trigger: true
    - get: rootfs-release-tarball
      trigger: true
    - get: cf-release
      params:
        depth: 10
        submodules: none
    - get: deployments-furnace
      params:
        depth: 10
        submodules: none
    - get: diego-release
      params:
        depth: 10
        submodules: none
    - get: kubernetes-release
      params:
        depth: 10
        submodules: none
  - task: generate-manifests
    config:
      image_resource:
        type: docker-image
        source: { repository: sykesm/bosh-deploy }
      platform: linux
      inputs:
      - name: cf-release
      - name: diego-release
      - name: deployments-furnace
      - name: kubernetes-release
      outputs:
      - name: manifests
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          bosh -n target {{bosh_target}} {{bosh_alias}}
          bosh login {{bosh_user}} {{bosh_password}}
          workspace=$PWD deployments-furnace/furnace/generate-manifests.sh
          cp deployments-furnace/furnace/manifests/*.yml manifests/
  - put: cf-furnace-diego
    params:
      cleanup: true
      manifest: manifests/diego.yml
      stemcells:
      - softlayer-stemcell/*.tgz
      releases:
      - diego-release-tarball/*.tgz
      - etcd-release-tarball/*.tgz
      - garden-linux-release-tarball/*.tgz
      - rootfs-release-tarball/*.tgz

- name: deploy-kubernetes
  public: false
  serial_groups:
  - deploy-kubernetes
  plan:
  - aggregate:
    - get: softlayer-stemcell
      trigger: true
    - get: consul-release-tarball
      trigger: true
    - get: etcd-release-tarball
      trigger: true
    - get: kubernetes-release
      trigger: true
      params:
        submodules: all
      trigger: true
    - get: cf-release
      trigger: true
      params:
        depth: 10
        submodules: none
    - get: deployments-furnace
      trigger: true
      params:
        depth: 10
        submodules: none
    - get: diego-release
      trigger: true
      params:
        depth: 10
        submodules: none
  - task: create-kubernetes-release
    config:
      image_resource:
        type: docker-image
        source: { repository: sykesm/bosh-deploy }
      platform: linux
      inputs:
      - name: kubernetes-release
      outputs:
      - name: kubernetes-release-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          bosh -n create release --version $(date "+%s") --with-tarball --name kubernetes --dir kubernetes-release
          cp kubernetes-release/dev_releases/kubernetes/*.tgz kubernetes-release-tarball/
  - task: generate-manifests
    config:
      image_resource:
        type: docker-image
        source: { repository: sykesm/bosh-deploy }
      platform: linux
      inputs:
      - name: cf-release
      - name: diego-release
      - name: deployments-furnace
      - name: kubernetes-release
      outputs:
      - name: manifests
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          bosh -n target {{bosh_target}} {{bosh_alias}}
          bosh login {{bosh_user}} {{bosh_password}}
          workspace=$PWD deployments-furnace/furnace/generate-manifests.sh
          cp deployments-furnace/furnace/manifests/*.yml manifests/
  - put: cf-furnace-kube
    params:
      cleanup: true
      manifest: manifests/kubernetes.yml
      stemcells:
      - softlayer-stemcell/*.tgz
      releases:
      - consul-release-tarball/*.tgz
      - etcd-release-tarball/*.tgz
      - kubernetes-release-tarball/*.tgz

- name: kubernetes-test
  public: true
  serial_groups:
  - deploy-cf
  - deploy-diego
  - deploy-kubernetes
  plan:
  - get: kubernetes-release
    passed: [ deploy-kubernetes ]
    trigger: true
    params:
      submodules: all
    trigger: true
  - task: install-tests
    config:
      image_resource:
        type: docker-image
        source: { repository: cloudfoundry/golang-ci }
      platform: linux
      inputs:
      - name: kubernetes-release
      run:
        path: bash
        args:
        - -c
        - |
          set -e

          cd kubernetes-release
          export GOPATH=$PWD
          export PATH=$PATH:$GOPATH/bin

          go install github.com/onsi/ginkgo/ginkgo

          cd src/tests
          echo '{"api_server": "http://10.155.248.140:8080" }' > config.json
          CONFIG=$PWD/config.json ginkgo -r
