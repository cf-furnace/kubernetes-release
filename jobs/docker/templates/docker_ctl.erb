#!/bin/bash

set -e

RUN_DIR=/var/vcap/sys/run/docker
LOG_DIR=/var/vcap/sys/log/docker
PIDFILE=${RUN_DIR}/docker.pid

source /var/vcap/packages/common/utils.sh

DOCKER_USER="<%= p('docker.user') %>"
DOCKER_GROUP="<%= p('docker.group') %>"
DOCKER_GRAPH_DIR="/var/vcap/data/docker/graph"

case $1 in

  start)
    pid_guard ${PIDFILE} "docker"

    # Install aufs-tools
    dpkg -i /var/vcap/packages/aufs-tools/aufs-tools_amd64.deb

    mkdir -p $RUN_DIR
    chown -R vcap:vcap $RUN_DIR

    mkdir -p $LOG_DIR
    chown -R vcap:vcap $LOG_DIR

    # Create Docker user & group
    create_group ${DOCKER_GROUP}
    create_user ${DOCKER_USER} ${DOCKER_GROUP}

    # Create docker data store
    if [ ! -d ${DOCKER_GRAPH_DIR} ]; then
      mkdir -p ${DOCKER_GRAPH_DIR}
      chown ${DOCKER_USER}:${DOCKER_GROUP} ${DOCKER_GRAPH_DIR}
      chmod 770 ${DOCKER_GRAPH_DIR}
    fi

    if [ ! -d /sys/fs/cgroup ]; then
      mkdir -p /sys/fs/cgroup
    fi

    # from https://github.com/tianon/cgroupfs-mount
    if ! mountpoint -q /sys/fs/cgroup; then
      mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup
    fi

    for subsys in $(awk '!/^#/ { if ($4 == 1) print $1 }' /proc/cgroups); do
      mkdir -p /sys/fs/cgroup/$subsys
      if ! mountpoint -q /sys/fs/cgroup/$subsys; then
         if ! mount -n -t cgroup -o $subsys cgroup /sys/fs/cgroup/$subsys; then
           rmdir /sys/fs/cgroup/$subsys || true
         fi
      fi
    done

    export PATH=/var/vcap/packages/docker/bin:$PATH

    if [ -f /var/vcap/sys/run/flannel/subnet.env ]; then
      source /var/vcap/sys/run/flannel/subnet.env
      FLANNEL_OPTS="--bip ${FLANNEL_SUBNET} --mtu ${FLANNEL_MTU}"
    fi

    # Start Docker daemon
    exec chpst -u ${DOCKER_USER}:${DOCKER_GROUP} docker daemon \
      ${FLANNEL_OPTS:-} \
      --graph ${DOCKER_GRAPH_DIR} \
      --group ${DOCKER_GROUP} \
      --host unix://${RUN_DIR}/docker.sock \
      --pidfile ${PIDFILE} \
      1> >(tee -a ${LOG_DIR}/docker.stdout.log | logger -p user.info -t vcap.docker) \
      2> >(tee -a ${LOG_DIR}/docker.stderr.log | logger -p user.error -t vcap.docker)
    ;;

  stop)
    # Stop containers - should be in drain
    docker_cmd="/var/vcap/packages/docker/bin/docker -H unix:///var/vcap/sys/run/docker/docker.sock"

    running_containers=$($docker_cmd ps -q)
    if [ -n "${running_containers}" ]; then
      $docker_cmd kill $running_containers
    fi

    # Stop Docker daemon
    kill_and_wait ${PIDFILE}

    if mountpoint -q ${DOCKER_GRAPH_DIR}; then
        umount ${DOCKER_GRAPH_DIR}
    fi
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    exit 1
    ;;

esac
exit 0
