#!/bin/bash

RUN_DIR=/var/vcap/sys/run/kubelet
LOG_DIR=/var/vcap/sys/log/kubelet
PIDFILE=$RUN_DIR/kubelet.pid
ROOT_DIR=/var/vcap/data/kubelet

source /var/vcap/packages/common/utils.sh

case $1 in

  start)
    pid_guard $PIDFILE "kubelet"

    mkdir -p $RUN_DIR
    chown -R vcap:vcap $RUN_DIR

    mkdir -p $LOG_DIR
    chown -R vcap:vcap $LOG_DIR

    mkdir -p $ROOT_DIR
    chown vcap:vcap $ROOT_DIR

    mkdir -p <%= p("kube.node.manifests_dir") %>

    echo $$ > $PIDFILE

    mount -o remount,rw /sys

    # add --config to point to manifests
    exec /var/vcap/packages/kubernetes/bin/hyperkube kubelet \
        --api-servers=<%= p("kube.cluster.apiservers").join(",") %> \
        --cert-dir=/var/vcap/sys/run/kubelet/certs \
        --cluster-dns=<%= p("kube.cluster.dns_address") %> \
        --cluster-domain=<%= p("kube.cluster.dns_domain") %> \
        --config=<%= p("kube.node.manifests_dir") %> \
        --docker-endpoint=unix:///var/vcap/sys/run/docker/docker.sock \
        --docker=unix:///var/vcap/sys/run/docker/docker.sock \
        --hairpin-mode=none \
<% if p("kube.cluster.use_consul") %> \
        --hostname-override=<%= "#{name.gsub('_', '-')}-#{spec.index}.node.cf.internal" %> \
<% else %> \
        --hostname-override=<%= spec.networks.to_h.values.first.ip %> \
<% end %> \
        --kubeconfig=/var/vcap/jobs/kube-node/config/kubeconfig.yaml \
        --logtostderr=true \
        --register-schedulable=<%= p("kube.node.register_schedulable") %> \
        --root-dir=$ROOT_DIR \
        2> >(tee -a $LOG_DIR/kubelet.stderr.log | logger -p user.info -t vcap.kubelet) \
        1> >(tee -a $LOG_DIR/kubelet.stdout.log | logger -p user.error -t vcap.kubelet)
    ;;

  stop)
    kill_and_wait $PIDFILE
    ;;

  *)
    echo "Usage: kubelet_ctl {start|stop}"
    ;;

esac
